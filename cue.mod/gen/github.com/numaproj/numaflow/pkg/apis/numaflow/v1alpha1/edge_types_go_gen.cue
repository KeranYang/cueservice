// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/numaproj/numaflow/pkg/apis/numaflow/v1alpha1

package v1alpha1

#Edge: {
	from: string @go(From) @protobuf(1,bytes,opt)
	to:   string @go(To) @protobuf(2,bytes,opt)

	// Conditional forwarding, only allowed when "From" is a Sink or UDF.
	// +optional
	conditions?: null | #ForwardConditions @go(Conditions,*ForwardConditions) @protobuf(3,bytes,opt)

	// OnFull specifies the behaviour for the write actions when the inter step buffer is full.
	// There are currently two options, retryUntilSuccess and discardLatest.
	// if not provided, the default value is set to "retryUntilSuccess"
	// +kubebuilder:validation:Enum=retryUntilSuccess;discardLatest
	// +optional
	onFull?: null | #BufferFullWritingStrategy @go(OnFull,*BufferFullWritingStrategy) @protobuf(4,bytes,opt)
}

// CombinedEdge is a combination of Edge and some other properties such as vertex type, partitions, limits.
// It's used to decorate the fromEdges and toEdges of the generated Vertex objects, so that in the vertex pod,
// it knows the properties of the connected vertices, for example, how many partitioned buffers I should write
// to, what is the write buffer length, etc.
#CombinedEdge: {
	#Edge

	// From vertex type.
	fromVertexType: #VertexType @go(FromVertexType) @protobuf(2,bytes,opt)

	// The number of partitions of the from vertex, if not provided, the default value is set to "1".
	// +optional
	fromVertexPartitionCount?: null | int32 @go(FromVertexPartitionCount,*int32) @protobuf(3,bytes,opt)

	// +optional
	fromVertexLimits?: null | #VertexLimits @go(FromVertexLimits,*VertexLimits) @protobuf(4,bytes,opt)

	// To vertex type.
	toVertexType: #VertexType @go(ToVertexType) @protobuf(5,bytes,opt)

	// The number of partitions of the to vertex, if not provided, the default value is set to "1".
	// +optional
	toVertexPartitionCount?: null | int32 @go(ToVertexPartitionCount,*int32) @protobuf(6,bytes,opt)

	// +optional
	toVertexLimits?: null | #VertexLimits @go(ToVertexLimits,*VertexLimits) @protobuf(7,bytes,opt)
}

#ForwardConditions: {
	// Tags used to specify tags for conditional forwarding
	tags?: null | #TagConditions @go(Tags,*TagConditions) @protobuf(1,bytes,opt)
}

#LogicOperator: string // #enumLogicOperator

#enumLogicOperator:
	#LogicOperatorAnd |
	#LogicOperatorOr |
	#LogicOperatorNot

#LogicOperatorAnd: #LogicOperator & "and"
#LogicOperatorOr:  #LogicOperator & "or"
#LogicOperatorNot: #LogicOperator & "not"

#TagConditions: {
	// Operator specifies the type of operation that should be used for conditional forwarding
	// value could be "and", "or", "not"
	// +kubebuilder:validation:Enum=and;or;not
	// +optional
	operator?: null | #LogicOperator @go(Operator,*LogicOperator) @protobuf(1,bytes,opt)

	// Values tag values for conditional forwarding
	values: [...string] @go(Values,[]string) @protobuf(2,bytes,rep)
}

#BufferFullWritingStrategy: string // #enumBufferFullWritingStrategy

#enumBufferFullWritingStrategy:
	#RetryUntilSuccess |
	#DiscardLatest

#RetryUntilSuccess: #BufferFullWritingStrategy & "retryUntilSuccess"
#DiscardLatest:     #BufferFullWritingStrategy & "discardLatest"
