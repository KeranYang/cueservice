// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/numaproj/numaflow/pkg/apis/numaflow/v1alpha1

package v1alpha1

import corev1 "k8s.io/api/core/v1"

#SASL: {
	// SASL mechanism to use
	mechanism?: null | #SASLType @go(Mechanism,*SASLType) @protobuf(1,bytes,opt,casttype=SASLType)

	// GSSAPI contains the kerberos config
	// +optional
	gssapi?: null | #GSSAPI @go(GSSAPI,*GSSAPI) @protobuf(2,bytes,opt)

	// SASLPlain contains the sasl plain config
	// +optional
	plain?: null | #SASLPlain @go(Plain,*SASLPlain) @protobuf(3,bytes,opt)

	// SASLSCRAMSHA256 contains the sasl plain config
	// +optional
	scramsha256?: null | #SASLPlain @go(SCRAMSHA256,*SASLPlain) @protobuf(4,bytes,opt)

	// SASLSCRAMSHA512 contains the sasl plain config
	// +optional
	scramsha512?: null | #SASLPlain @go(SCRAMSHA512,*SASLPlain) @protobuf(5,bytes,opt)
}

// SASLType describes the SASL type
#SASLType: string // #enumSASLType

#enumSASLType:
	#SASLTypeOAuth |
	#SASLTypePlaintext |
	#SASLTypeSCRAMSHA256 |
	#SASLTypeSCRAMSHA512 |
	#SASLTypeGSSAPI

// SASLTypeOAuth represents the SASL/OAUTHBEARER mechanism (Kafka 2.0.0+)
// SASLTypeOAuth = "OAUTHBEARER"
#SASLTypeOAuth: #SASLType & "OAUTHBEARER"

// SASLTypePlaintext represents the SASL/PLAIN mechanism
// SASLTypePlaintext = "PLAIN"
#SASLTypePlaintext: #SASLType & "PLAIN"

// SASLTypeSCRAMSHA256 represents the SCRAM-SHA-256 mechanism.
// SASLTypeSCRAMSHA256 = "SCRAM-SHA-256"
#SASLTypeSCRAMSHA256: #SASLType & "SCRAM-SHA-256"

// SASLTypeSCRAMSHA512 represents the SCRAM-SHA-512 mechanism.
// SASLTypeSCRAMSHA512 = "SCRAM-SHA-512"
#SASLTypeSCRAMSHA512: #SASLType & "SCRAM-SHA-512"

// SASLTypeGSSAPI represents the GSSAPI mechanism
// SASLTypeGSSAPI      = "GSSAPI"
#SASLTypeGSSAPI: #SASLType & "GSSAPI"

// GSSAPI represents a SASL GSSAPI config
#GSSAPI: {
	serviceName: string @go(ServiceName) @protobuf(1,bytes,opt)
	realm:       string @go(Realm) @protobuf(2,bytes,opt)

	// UsernameSecret refers to the secret that contains the username
	usernameSecret?: null | corev1.#SecretKeySelector @go(UsernameSecret,*corev1.SecretKeySelector) @protobuf(3,bytes,opt)

	// valid inputs - KRB5_USER_AUTH, KRB5_KEYTAB_AUTH
	authType?: null | #KRB5AuthType @go(AuthType,*KRB5AuthType) @protobuf(4,bytes,opt,casttype=KRB5AuthType)

	// PasswordSecret refers to the secret that contains the password
	// +optional
	passwordSecret?: null | corev1.#SecretKeySelector @go(PasswordSecret,*corev1.SecretKeySelector) @protobuf(5,bytes,opt)

	// KeytabSecret refers to the secret that contains the keytab
	// +optional
	keytabSecret?: null | corev1.#SecretKeySelector @go(KeytabSecret,*corev1.SecretKeySelector) @protobuf(6,bytes,opt)

	// KerberosConfigSecret refers to the secret that contains the kerberos config
	// +optional
	kerberosConfigSecret?: null | corev1.#SecretKeySelector @go(KerberosConfigSecret,*corev1.SecretKeySelector) @protobuf(7,bytes,opt)
}

// KRB5AuthType describes the kerberos auth type
// +enum
#KRB5AuthType: string // #enumKRB5AuthType

#enumKRB5AuthType:
	#KRB5UserAuth |
	#KRB5KeytabAuth

// KRB5UserAuth represents the password method
// KRB5UserAuth = "KRB5_USER_AUTH" = 1
#KRB5UserAuth: #KRB5AuthType & "KRB5_USER_AUTH"

// KRB5KeytabAuth represents the password method
// KRB5KeytabAuth = "KRB5_KEYTAB_AUTH" = 2
#KRB5KeytabAuth: #KRB5AuthType & "KRB5_KEYTAB_AUTH"

#SASLPlain: {
	// UserSecret refers to the secret that contains the user
	userSecret?: null | corev1.#SecretKeySelector @go(UserSecret,*corev1.SecretKeySelector) @protobuf(1,bytes,opt)

	// PasswordSecret refers to the secret that contains the password
	// +optional
	passwordSecret?: null | corev1.#SecretKeySelector @go(PasswordSecret,*corev1.SecretKeySelector) @protobuf(2,bytes,opt)
	handshake:       bool                             @go(Handshake) @protobuf(3,bytes,opt)
}
