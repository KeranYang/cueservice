// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/numaproj/numaflow/pkg/apis/numaflow/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
)

#Function: {
	// +kubebuilder:validation:Enum=cat;filter
	name: string @go(Name) @protobuf(1,bytes,opt)

	// +optional
	args?: [...string] @go(Args,[]string) @protobuf(2,bytes,rep)

	// +optional
	kwargs?: {[string]: string} @go(KWArgs,map[string]string) @protobuf(3,bytes,rep)
}

#UDF: {
	// +optional
	container?: null | #Container @go(Container,*Container) @protobuf(1,bytes,opt)

	// +optional
	builtin?: null | #Function @go(Builtin,*Function) @protobuf(2,bytes,opt)

	// +optional
	groupBy?: null | #GroupBy @go(GroupBy,*GroupBy) @protobuf(3,bytes,opt)
}

// GroupBy indicates it is a reducer UDF
#GroupBy: {
	// Window describes the windowing strategy.
	window: #Window @go(Window) @protobuf(1,bytes,opt)

	// +optional
	keyed?: bool @go(Keyed) @protobuf(2,bytes,opt)

	// AllowedLateness allows late data to be included for the Reduce operation as long as the late data is not later
	// than (Watermark - AllowedLateness).
	// +optional
	allowedLateness?: null | metav1.#Duration @go(AllowedLateness,*metav1.Duration) @protobuf(3,bytes,opt)

	// Storage is used to define the PBQ storage for a reduce vertex.
	storage?: null | #PBQStorage @go(Storage,*PBQStorage) @protobuf(4,bytes,opt)
}

// Window describes windowing strategy
#Window: {
	// +optional
	fixed?: null | #FixedWindow @go(Fixed,*FixedWindow) @protobuf(1,bytes,opt)

	// +optional
	sliding?: null | #SlidingWindow @go(Sliding,*SlidingWindow) @protobuf(2,bytes,opt)

	// +optional
	session?: null | #SessionWindow @go(Session,*SessionWindow) @protobuf(3,bytes,opt)
}

// FixedWindow describes a fixed window
#FixedWindow: {
	// Length is the duration of the fixed window.
	length?: null | metav1.#Duration @go(Length,*metav1.Duration) @protobuf(1,bytes,opt)

	// +optional
	// Streaming should be set to true if the reduce udf is streaming.
	streaming?: bool @go(Streaming) @protobuf(2,bytes,opt)
}

// SlidingWindow describes a sliding window
#SlidingWindow: {
	// Length is the duration of the sliding window.
	length?: null | metav1.#Duration @go(Length,*metav1.Duration) @protobuf(1,bytes,opt)

	// Slide is the slide parameter that controls the frequency at which the sliding window is created.
	slide?: null | metav1.#Duration @go(Slide,*metav1.Duration) @protobuf(2,bytes,opt)

	// +optional
	// Streaming should be set to true if the reduce udf is streaming.
	streaming?: bool @go(Streaming) @protobuf(3,bytes,opt)
}

// SessionWindow describes a session window
#SessionWindow: {
	// Timeout is the duration of inactivity after which a session window closes.
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration) @protobuf(1,bytes,opt)
}

// PBQStorage defines the persistence configuration for a vertex.
#PBQStorage: {
	// +optional
	persistentVolumeClaim?: null | #PersistenceStrategy @go(PersistentVolumeClaim,*PersistenceStrategy) @protobuf(1,bytes,opt)

	// +optional
	emptyDir?: null | corev1.#EmptyDirVolumeSource @go(EmptyDir,*corev1.EmptyDirVolumeSource) @protobuf(2,bytes,opt)

	// +optional
	no_store?: null | #NoStore @go(NoStore,*NoStore) @protobuf(3,bytes,opt)
}

// NoStore means there will be no persistence storage and there will be data loss during pod restarts.
// Use this option only if you do not care about correctness (e.g., approx statistics pipeline like sampling rate, etc.).
#NoStore: {}
